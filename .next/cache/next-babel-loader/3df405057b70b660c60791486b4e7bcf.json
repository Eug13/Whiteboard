{"ast":null,"code":"import fetch from \"isomorphic-fetch\";\nimport { parse } from \"node-html-parser\";\nconst url = \"http://crossfit.rv.ua/\";\nexport function fetchCircuits() {\n  return fetch(url).then(res => res.text()) //;res.text() )\n  .then(txt => {\n    const root = parse(txt);\n    const data = root.querySelector(\".wodster\");\n    const txt1 = data.toString().split(\"No Comments</a> </span>\")[1].split(\"</div>\")[1];\n    const txt2 = txt1.split(\">\");\n    const txt3 = [];\n    txt2.forEach(i => {\n      const item = i.split(\"<\")[0];\n      txt3.push(item);\n    });\n    txt3.shift();\n    txt3.pop();\n    return txt3;\n  }).catch(e => console.error(e));\n}","map":{"version":3,"sources":["/Users/yderz/Documents/Whiteboard/components/api.js"],"names":["fetch","parse","url","fetchCircuits","then","res","text","txt","root","data","querySelector","txt1","toString","split","txt2","txt3","forEach","i","item","push","shift","pop","catch","e","console","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAGA,MAAMC,GAAG,GAAG,wBAAZ;AAEA,OAAO,SAASC,aAAT,GAA0B;AAC7B,SAAOH,KAAK,CAAEE,GAAF,CAAL,CACFE,IADE,CACIC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADX,EACsB;AADtB,GAEFF,IAFE,CAEIG,GAAG,IAAI;AACV,UAAMC,IAAI,GAAGP,KAAK,CAAEM,GAAF,CAAlB;AACA,UAAME,IAAI,GAAGD,IAAI,CAACE,aAAL,CAAoB,UAApB,CAAb;AACA,UAAMC,IAAI,GAAGF,IAAI,CAACG,QAAL,GAAgBC,KAAhB,CAAuB,yBAAvB,EAAoD,CAApD,EAAwDA,KAAxD,CAA+D,QAA/D,EAA2E,CAA3E,CAAb;AACA,UAAMC,IAAI,GAAGH,IAAI,CAACE,KAAL,CAAY,GAAZ,CAAb;AACA,UAAME,IAAI,GAAG,EAAb;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAcC,CAAC,IAAI;AACf,YAAMC,IAAI,GAAGD,CAAC,CAACJ,KAAF,CAAS,GAAT,EAAgB,CAAhB,CAAb;AACAE,MAAAA,IAAI,CAACI,IAAL,CAAWD,IAAX;AACH,KAHD;AAIAH,IAAAA,IAAI,CAACK,KAAL;AACAL,IAAAA,IAAI,CAACM,GAAL;AACA,WAAON,IAAP;AACH,GAfE,EAgBFO,KAhBE,CAgBKC,CAAC,IAAIC,OAAO,CAACC,KAAR,CAAeF,CAAf,CAhBV,CAAP;AAiBH","sourcesContent":["import fetch from \"isomorphic-fetch\";\nimport { parse } from \"node-html-parser\";\n\n\nconst url = \"http://crossfit.rv.ua/\";\n\nexport function fetchCircuits( ) {\n    return fetch( url )\n        .then( res => res.text())//;res.text() )\n        .then( txt => {\n            const root = parse( txt );\n            const data = root.querySelector( \".wodster\" );\n            const txt1 = data.toString().split( \"No Comments</a> </span>\" )[ 1 ].split( \"</div>\" )[ 1 ];\n            const txt2 = txt1.split( \">\" );\n            const txt3 = [ ];\n            txt2.forEach( i => {\n                const item = i.split( \"<\" )[ 0 ];\n                txt3.push( item );\n            } );\n            txt3.shift();\n            txt3.pop();\n            return txt3;\n        } )\n        .catch( e => console.error( e ) );\n}"]},"metadata":{},"sourceType":"module"}